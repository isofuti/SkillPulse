from typing import List, Dict
import re
from collections import Counter

class WordCloudService:
    def __init__(self):
        # Список стоп-слов
        self.stop_words = {
            'и', 'в', 'во', 'не', 'что', 'он', 'на', 'я', 'с', 'со', 'как', 'а', 'то', 'все', 'она',
            'так', 'его', 'но', 'да', 'ты', 'к', 'у', 'же', 'вы', 'за', 'бы', 'по', 'только', 'ее',
            'мне', 'было', 'вот', 'от', 'меня', 'еще', 'нет', 'о', 'из', 'ему', 'теперь', 'когда',
            'даже', 'ну', 'вдруг', 'ли', 'если', 'уже', 'или', 'ни', 'быть', 'был', 'него', 'до',
            'вас', 'нибудь', 'опять', 'уж', 'вам', 'ведь', 'там', 'потом', 'себя', 'ничего', 'ей',
            'может', 'они', 'тут', 'где', 'есть', 'надо', 'ней', 'для', 'мы', 'тебя', 'их', 'чем',
            'была', 'сам', 'чтоб', 'без', 'будто', 'чего', 'раз', 'тоже', 'себе', 'под', 'будет',
            'ж', 'тогда', 'кто', 'этот', 'того', 'потому', 'этого', 'какой', 'совсем', 'ним', 'здесь',
            'этом', 'один', 'почти', 'мой', 'тем', 'чтобы', 'нее', 'сейчас', 'были', 'куда', 'зачем',
            'всех', 'никогда', 'можно', 'при', 'наконец', 'два', 'об', 'другой', 'хоть', 'после',
            'над', 'больше', 'тот', 'через', 'эти', 'нас', 'про', 'всего', 'них', 'какая', 'много',
            'разве', 'три', 'эту', 'моя', 'впрочем', 'хорошо', 'свою', 'этой', 'перед', 'иногда',
            'лучше', 'чуть', 'том', 'нельзя', 'такой', 'им', 'более', 'всегда', 'конечно', 'всю',
            'между', 'python', 'разработчик', 'developer', 'программист', 'программист', 'опыт',
            'знание', 'знания', 'умение', 'умения', 'навык', 'навыки', 'работа', 'работы', 'задача',
            'задачи', 'требование', 'требования', 'обязанность', 'обязанности', 'компания', 'компании',
            'проект', 'проекты', 'разработка', 'разработки', 'код', 'коды', 'код', 'кода', 'кодом',
            'коду', 'кодом', 'коде', 'коды', 'кодов', 'кодам', 'кодами', 'кодах'
        }

    def create_word_cloud(self, vacancies: List[Dict]) -> Dict[str, int]:
        """Создает облако слов из описаний вакансий"""
        if not vacancies:
            return {}

        # Собираем весь текст из вакансий
        all_text = []
        for vacancy in vacancies:
            # Получаем текст из разных полей вакансии
            texts = []
            
            # Название вакансии
            if vacancy.get('name'):
                texts.append(vacancy['name'])
            
            # Требования
            if vacancy.get('snippet', {}).get('requirement'):
                texts.append(vacancy['snippet']['requirement'])
            
            # Обязанности
            if vacancy.get('snippet', {}).get('responsibility'):
                texts.append(vacancy['snippet']['responsibility'])
            
            # Добавляем все тексты в общий список
            all_text.extend(texts)

        # Объединяем весь текст
        text = ' '.join(all_text)
        
        # Приводим к нижнему регистру
        text = text.lower()
        
        # Удаляем специальные символы и цифры
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\d+', ' ', text)
        
        # Разбиваем на слова
        words = text.split()
        
        # Фильтруем стоп-слова и короткие слова
        words = [word for word in words if word not in self.stop_words and len(word) > 2]
        
        # Считаем частоту слов
        word_freq = Counter(words)
        
        # Возвращаем топ-50 слов
        return dict(word_freq.most_common(50)) 